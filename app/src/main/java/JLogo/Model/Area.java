//
// @author Alessio Giacch√©
//
package JLogo.Model;


import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * This class gives a default implementation ot the "Plane" interface,
 * This class rapresent the Area-Plane of the Logo program which is
 * composed of a positive Base and Height. Inside there are other
 * important compnents such as the Cursor, the List of the Segment that is
 * created and other.
 */
public class Area implements Plane {

    /**
     * The base value of this Area.
     */
    private final double base;

    /**
     * The Height value of this Area.
     */
    private final double height;

    /**
     * The Cursor of this Area.
     */
    private final Cursor cursor;

    /**
     * The color of the Plane of this Area.
     */
    private RGBColor colorPlane;

    /**
     * The List of Segments useful for saving
     * all the Segment within it that
     * are generated by the movements of the Cursor.
     */
    private List<Segment> segmentList;

    /**
     * The Polygon that can be created
     * through the Segments forming
     * a closed Area.
     */
    private Polygon polygon;

    /**
     * Constructor of Area instance.
     *
     * @param base   the base value for this Area.
     * @param height the height value for this Area.
     */
    public Area(double base, double height) {
        if (base <= 0 || height <= 0)
            throw new IllegalArgumentException("Illegal area parameters.");
        this.base = base;
        this.height = height;
        this.cursor = new Cursor(homeCoordinate());
        this.colorPlane = new RGBColor(255, 255, 255);
        this.segmentList = new ArrayList<>(4);
        this.polygon = null;
    }

    @Override
    public double getBase() {
        return this.base;
    }

    @Override
    public double getHeight() {
        return this.height;
    }

    @Override
    public RGBColor getColorPlane() {
        return this.colorPlane;
    }

    @Override
    public void setColorPlane(RGBColor color) {
        Objects.requireNonNull(color);
        this.colorPlane = color;
    }

    @Override
    public Cursor getCursor() {
        return this.cursor;
    }

    @Override
    public Polygon getPolygon() {
        return this.polygon;
    }

    @Override
    public Position homeCoordinate() {
        return new Position(this.getBase() / 2, this.getHeight() / 2);
    }

    @Override
    public boolean coordinateInside(Position position) {
        Objects.requireNonNull(position);
        return position.getX() <= this.getBase() && position.getY() <= this.getHeight();
    }

    @Override
    public Position applyMaxCoordinate(Position position) {
        Objects.requireNonNull(position);
        double x = position.getX();
        double y = position.getY();
        if (x > this.getBase()) {
            double res = x - this.getBase();
            x -= res;
        }
        if (y > this.getHeight()) {
            double res = y - this.getHeight();
            y -= res;
        }
        return new Position(x, y);
    }

    @Override
    public boolean isSegmentPresent(Segment s) {
        Objects.requireNonNull(s);
        for (Segment seg : segmentList) {
            if (seg.equals(s)) {
                return true;
            }
        }
        return false;
    }

    @Override
    public void addSegment(Segment s) {
        Objects.requireNonNull(s);
        if (isSegmentPresent(s))
            throw new IllegalArgumentException("Segment already exists.\n");
        this.segmentList.add(s);
    }

    @Override
    public boolean isPresentPolygon() {
        if (this.polygon == null)
            return false;
        return true;
    }

    @Override
    public void addPolygon(Polygon polygon) {
        Objects.requireNonNull(polygon);
        if (isPresentPolygon())
            throw new IllegalArgumentException("Polygon already present.");
        this.polygon = polygon;
    }

    @Override
    public List<Segment> segmentList() {
        return this.segmentList;
    }

    @Override
    public void clear() {
        this.colorPlane = new RGBColor(255, 255, 255);
        this.segmentList = new ArrayList<>(4);
        this.polygon = null;
    }
}
